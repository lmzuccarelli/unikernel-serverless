- name: remove project directories
  ansible.builtin.file:
    path: '{{ user_dir }}/{{ project_dir }}/{{ item.name }}'
    state: absent
  loop: "{{ repos }}"
  tags: fetch-build

- name: git checkout the project/s
  ansible.builtin.git:
    repo: '{{ item.repo }}'
    dest: '{{ user_dir }}/{{ project_dir }}/{{ item.name }}'
    version: main
  loop: "{{ repos }}"
  tags: fetch-build

- name: cd into each repo then compile/build
  shell: 'cd {{ user_dir }}/{{ project_dir }}/{{ item.name }} && make build-release'
  register: output
  with_items: "{{ repos }}"
  tags: fetch-build

- debug: 
    var: output
  tags: fetch-build

- name: build each unikernel from binary
  shell: 'cd {{ user_dir }}/{{ project_dir }}/{{ item.name }} && ops build -c config.json -i {{ item.name }} target/release/{{ item.name }}'
  register: output_build
  with_items: "{{ repos }}"
  tags: fetch-build

- debug: 
    var: output_build
  tags: fetch-build

- name: mirror the unikernel images to each node
  copy:
    src: "{{ user_dir }}/.ops/images/{{ item.name }}"
    dest: "{{ user_dir }}/.ops/images/{{ item.name }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0755
  with_items: "{{ instances }}"
  tags: deploy

- name: create unikernel instance on each node
  command: "ops instance create -p {{ item.port }} -i {{ item.instance }} {{ item.image }}"
  async: 5
  poll: 5
  register: instance
  with_items: "{{ instances }}" 
  tags: deploy

- debug: 
    var: instance
  tags: deploy

- name: stop all unikernel instances 
  command: "ops instance delete {{ item.instance }}"
  async: 5
  poll: 5
  register: instance_stop
  with_items: "{{ instances }}" 
  tags: stop

- debug: 
    var: instance_stop
  tags: stop

- name: copy raw binary files to each node
  copy:
    src: "{{ user_dir }}/{{ project_dir }}/{{ item.name }}/target/release/{{ item.name }}"
    dest: "{{ user_dir }}/{{ item.name }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0755
  with_items: "{{ repos }}"
  tags: deploy-raw

- name: start each instance of the raw binary on each node
  command: "{{ user_dir }}/{{ item.name }} &"
  async: 5
  poll: 5
  register: instance-raw
  with_items: "{{ instances }}" 
  tags: deploy-na

- debug: 
    var: instance-raw
  tags: deploy-raw

- name: stop all raw binary instances 
  shell: "kill -9 $(ps -ef | grep -v grep | grep {{ item.instance }} | awk '{print $2}')"
  async: 5
  poll: 5
  register: instance_stop
  with_items: "{{ instances }}" 
  tags: stop-raw

